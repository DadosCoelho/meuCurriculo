# Curr√≠culo Din√¢mico

Este √© um projeto de curr√≠culo web din√¢mico que exibe informa√ß√µes pessoais, forma√ß√£o, experi√™ncias e projetos de um desenvolvedor, puxando dados de um Gist do GitHub e da API de reposit√≥rios do GitHub. O curr√≠culo √© responsivo, suporta temas claro/escuro, e permite salvar o conte√∫do como PDF.

## Funcionalidades

- **Informa√ß√µes Din√¢micas**: Dados do curr√≠culo (nome, contato, forma√ß√£o, experi√™ncias) s√£o carregados de um arquivo `curriculo.json` hospedado em um Gist do GitHub.
- **Projetos do GitHub**: Exibe reposit√≥rios do GitHub em se√ß√µes de destaque e carrossel, com links para sites (se dispon√≠veis, indicados por um √≠cone de corrente üîó) ou reposit√≥rios.
- **Tema Responsivo**: Suporta modo claro e escuro com base nas prefer√™ncias do sistema do usu√°rio.
- **Exporta√ß√£o para PDF**: Permite salvar o curr√≠culo como PDF usando a biblioteca `html2pdf.js`.
- **Anima√ß√µes**: Efeitos de transi√ß√£o para se√ß√µes e projetos, usando Intersection Observer.
- **Cache Local**: Armazena dados em `localStorage` para reduzir chamadas √† API.

## Estrutura do Projeto

```
‚îú‚îÄ‚îÄ index.html        # P√°gina principal do curr√≠culo
‚îú‚îÄ‚îÄ styles.css        # Estilos da interface
‚îú‚îÄ‚îÄ script.js         # L√≥gica principal (carregamento de dados, renderiza√ß√£o)
‚îú‚îÄ‚îÄ .env              # Configura√ß√µes sens√≠veis (GIST_ID, GITHUB_USERNAME, PROFILE_IMAGE_URL)
‚îî‚îÄ‚îÄ .gitignore        # Ignora arquivos sens√≠veis e tempor√°rios
```

### Arquivos Principais

- **`index.html`**: Cont√©m a estrutura HTML do curr√≠culo, incluindo refer√™ncia a `script.js`.
- **`styles.css`**: Define o layout, temas e anima√ß√µes.
- **`script.js`**: Gerencia o carregamento de dados do Gist e reposit√≥rios, renderiza√ß√£o de projetos, e funcionalidades como salvar PDF.
- **`.env`**: Armazena chaves sens√≠veis (`GIST_ID`, `GITHUB_USERNAME`, `PROFILE_IMAGE_URL`). **N√£o versionado** (ignorado pelo `.gitignore`).
- **`.gitignore`**: Protege `.env` e outros arquivos sens√≠veis (ex.: `node_modules`, `config.js`).

## Estrutura do Gist

O curr√≠culo carrega dados de um arquivo `curriculo.json` hospedado em um Gist do GitHub, identificado pelo `GIST_ID` em `.env`. O arquivo JSON deve seguir a estrutura abaixo:

```json
{
  "nome": "Seu Nome Completo",
  "contato": {
    "email": "seu.email@exemplo.com",
    "github": "https://github.com/seu-usuario",
    "telefone": "+55 (11) 99999-9999"
  },
  "objetivos": "Descri√ß√£o dos seus objetivos profissionais.",
  "formacao": [
    {
      "curso": "Nome do Curso",
      "instituicao": "Nome da Institui√ß√£o",
      "periodo": "MM/AAAA - MM/AAAA"
    }
    // ... mais forma√ß√µes
  ],
  "experiencias": [
    {
      "cargo": "Cargo Ocupado",
      "empresa": "Nome da Empresa",
      "periodo": "MM/AAAA - MM/AAAA",
      "descricao": "Descri√ß√£o das responsabilidades e conquistas."
    }
    // ... mais experi√™ncias
  ]
}
```

### Explica√ß√£o dos Campos

- **`nome`**: Seu nome completo, exibido no cabe√ßalho e rodap√©.
- **`contato`**: Objeto com:
  - `email`: Endere√ßo de e-mail, exibido como link clic√°vel.
  - `github`: URL do perfil do GitHub, exibido como link.
  - `telefone`: N√∫mero de telefone, exibido como link clic√°vel.
- **`objetivos`**: Texto descrevendo seus objetivos profissionais.
- **`formacao`**: Array de objetos, cada um com:
  - `curso`: Nome do curso (ex.: "Ci√™ncia da Computa√ß√£o").
  - `instituicao`: Nome da institui√ß√£o (ex.: "Universidade XYZ").
  - `periodo`: Per√≠odo do curso (ex.: "01/2018 - 12/2022").
- **`experiencias`**: Array de objetos, cada um com:
  - `cargo`: Cargo ocupado (ex.: "Desenvolvedor Frontend").
  - `empresa`: Nome da empresa (ex.: "Empresa ABC").
  - `periodo`: Per√≠odo de trabalho (ex.: "06/2020 - Presente").
  - `descricao`: Descri√ß√£o detalhada das responsabilidades.

### Como Criar o Gist

1. Acesse [gist.github.com](https://gist.github.com/).
2. Crie um novo Gist com um arquivo chamado `curriculo.json`.
3. Cole o JSON com a estrutura acima, preenchendo com seus dados.
4. Torne o Gist p√∫blico (ou secreto, se preferir, mas garanta que a API possa acess√°-lo).
5. Copie o ID do Gist (ex.: `1848e354f2c127682042a4ec9b611b5b`) e adicione-o ao `.env`.

## Configura√ß√£o

### Pr√©-requisitos

- Navegador moderno (Chrome, Firefox, Safari, etc.).
- Conex√£o com a internet para carregar dados da API do GitHub.
- Servidor local (recomendado) para evitar problemas de CORS ao testar localmente (ex.: `npx http-server`).
- Configura√ß√£o do servidor para bloquear acesso direto ao `.env` (ex.: Nginx, Apache).

### Passos para Executar

1. **Clone o Reposit√≥rio**:
   ```bash
   git clone https://github.com/DadosCoelho/meuCurriculo.git
   cd meuCurriculo
   ```

2. **Crie o Arquivo `.env`**:
   - Crie um arquivo `.env` na raiz do projeto com o seguinte conte√∫do:
     ```plaintext
     GIST_ID=SEU_GIST_ID
     GITHUB_USERNAME=SEU_GITHUB_USERNAME
     PROFILE_IMAGE_URL=URL_DA_SUA_IMAGEM
     ```
   - Substitua `SEU_GIST_ID` pelo ID do Gist que cont√©m o arquivo `curriculo.json`.
   - Substitua `SEU_GITHUB_USERNAME` pelo seu nome de usu√°rio do GitHub.
   - Substitua `URL_DA_SUA_IMAGEM` pelo link da sua imagem de perfil (ex.: `https://avatars.githubusercontent.com/u/165790519?v=4`).
   - **Nota**: Este arquivo √© ignorado pelo `.gitignore` para proteger suas chaves.

3. **Configure o Servidor para Proteger o `.env`**:
   - Para evitar que o `.env` seja acess√≠vel publicamente, configure seu servidor:
     - **Nginx**:
       ```nginx
       location ~* \.env$ {
           deny all;
           return 403;
       }
       ```
     - **Apache**:
       ```apache
       <Files ".env">
           Order allow,deny
           Deny from all
       </Files>
       ```
   - Alternativamente, use um proxy ou backend para fornecer as vari√°veis de configura√ß√£o de forma segura.

4. **Verifique o `index.html`**:
   - Certifique-se de que `index.html` inclui apenas o script necess√°rio:
     ```html
     <script src="script.js"></script>
     ```
   - O script `script.js` carrega as configura√ß√µes do `.env`.

5. **Execute o Projeto**:
   - Inicie um servidor local:
     ```bash
     npx http-server
     ```
   - Acesse `http://localhost:8080` no navegador.
   - Alternativamente, abra `index.html` diretamente, mas isso pode causar problemas de CORS.

6. **Teste as Funcionalidades**:
   - Verifique se os dados do Gist e reposit√≥rios s√£o carregados.
   - Confirme que a imagem de perfil usa o `PROFILE_IMAGE_URL` do `.env`.
   - Teste o bot√£o de salvar PDF.
   - Confirme que os links de projetos com `homepage` mostram o √≠cone de corrente (`üîó`).

## Seguran√ßa

- **Chaves Sens√≠veis**: O `GIST_ID`, `GITHUB_USERNAME` e `PROFILE_IMAGE_URL` s√£o armazenados em `.env`, que √© ignorado pelo `.gitignore` para evitar exposi√ß√£o no reposit√≥rio Git.
- **Limita√ß√µes**: Como o projeto √© est√°tico, o `.env` precisa ser acess√≠vel via `fetch('/.env')`, o que pode exp√¥-lo em servidores p√∫blicos. Para maior seguran√ßa, considere:
  - Configurar o servidor para bloquear acesso direto ao `.env` (veja acima).
  - Usar um token de acesso pessoal do GitHub com permiss√µes restritas.
  - Configurar um backend ou proxy para chamadas √† API.
  - Hospedar o Gist em um reposit√≥rio privado.
- **Cache Seguro**: Dados armazenados no `localStorage` t√™m um TTL de 1 hora e n√£o incluem informa√ß√µes sens√≠veis.

## Personaliza√ß√£o

- **Estiliza√ß√£o**: Edite `styles.css` para ajustar cores, fontes ou anima√ß√µes.
- **Configura√ß√µes**: Modifique `script.js` para alterar o n√∫mero de projetos em destaque (`featuredProjectCount`) ou o atraso das anima√ß√µes (`animationDelay`).
- **Dados do Curr√≠culo**: Atualize o arquivo `curriculo.json` no Gist para refletir suas informa√ß√µes pessoais, forma√ß√£o e experi√™ncias.
- **Imagem de Perfil**: Atualize o `PROFILE_IMAGE_URL` no `.env` para mudar a imagem de perfil.

## Depend√™ncias

- **html2pdf.js**: Usado para gerar PDFs do curr√≠culo. Inclu√≠do via CDN.
- **API do GitHub**: Usada para carregar dados do Gist e reposit√≥rios.

## Contribui√ß√£o

1. Fa√ßa um fork do reposit√≥rio.
2. Crie uma branch para sua feature:
   ```bash
   git checkout -b minha-feature
   ```
3. Commite suas altera√ß√µes:
   ```bash
   git commit -m "Adiciona minha feature"
   ```
4. Envie para o reposit√≥rio remoto:
   ```bash
   git push origin minha-feature
   ```
5. Abra um Pull Request.

## Licen√ßa

[MIT License](LICENSE) - Sinta-se √† vontade para usar, modificar e distribuir este projeto.

## Contato

- **GitHub**: [DadosCoelho](https://github.com/DadosCoelho)
- **Email**: Dispon√≠vel no curr√≠culo renderizado.